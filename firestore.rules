rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAdmin() {
      return request.auth != null && request.auth.token.role == "ADMIN"
    }

    function isStaff() {
      return request.auth != null && request.auth.token.role == "STAFF"
    }

    function isEmployee() {
      return isAdmin() || isStaff()
    }
    
    function isStudent() {
      return request.auth != null && request.auth.token.role == "STUDENT"
    }

    function isStudentId(id) {
      return request.auth != null && request.auth.token.studentId == id
    }

    function isOnSurveyAccessList(surveyId) {
      let data = get(/databases/$(database)/documents/surveys/$(surveyId)/surveyAccessList/surveyAccessList).data;
      return data != null && data.keys().hasAny([request.auth.token.studentId]);
    }

    match /students/{studentId} {
      allow read: if isEmployee() || isStudentId(studentId)
      allow create: if isStudent()
      allow update: if isEmployee() || isStudentId(studentId)
      allow delete: if false
    }

    match /surveys/{surveyId} {
      allow read: if isEmployee() || isOnSurveyAccessList(surveyId)
      allow write: if isEmployee()

      match /surveyAccessList/surveyAccessList {
        allow read, write: if false
      }
    }

    match /{path=**}/assignments/{assignmentId} {
      allow read: if isEmployee() || isStudentId(resource.data.studentId)
      allow create, update: if isEmployee()
      allow delete: if isEmployee() && resource.data.responseId == null
    }

    match /adminData/{document=**} {
      allow read: if isEmployee()
      allow write: if false
    }

    match /metadata {
      match /nextStudentId {
        allow read: if isStudentId(null)
        allow create: if isStudentId(null) && request.resource.data.nextStudentId == 1000000
        allow update: if isStudentId(null) && request.resource.data.nextStudentId == resource.data.nextStudentId + 1
      }
    }
  }
}